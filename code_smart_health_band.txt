4.3 Code:
4.3.1 with Wi-Fi:
#include <OneWire.h>
#include <SoftwareSerial.h>

SoftwareSerial heart(2,3); // pin 2 (heart rate sensor output)
OneWire  ds(10);  // on pin 10 (temp sensor orange wire)

#define SSID "Archana"
#define PASS "archuorl"

#define IP "184.106.153.149" // thingspeak.com
String GET = "GET /update?key=B0YIHHP7FLWDANL9&field1=0";

SoftwareSerial monitor(10, 11); // RX, TX

int sys, dia, pulse;
int x,y,z;

byte i;
byte present = 0;
byte type_s;
byte data[12];
byte addr[8];
float celsius, fahrenheit;

void setup() 
{
  heart.begin(9600);
  Serial.begin(115200);
  //monitor.begin(9600);
  //sendDebug("AT");
  delay(5000);
  //if(Serial.find("OK"))
  //{
   // monitor.println("RECEIVED: OK");
    //connectWiFi();
  //}
}

void loop() 
{
  while(!heart.available());
  while(heart.available())
  {
    sys=heart.parseInt();
    dia=heart.parseInt();
    pulse=heart.parseInt();
    Serial.println(sys);
    Serial.println(dia);
    Serial.println(pulse);
    delay(4000);
    while(heart.available())
    {
      char ch=heart.read();
      delay(10);
    }
   }
   read_gesture();
   read_temp();
   Serial.println(x);
   Serial.println(y);
   Serial.println(z);

   Serial.print(celsius);
   //updateTemp(String(sys),String(dia),String(pulse),String(celsius),String(x),String(y),String(z));
   //Serial.print(" Celsius, ");
   //Serial.print(fahrenheit);
   //Serial.println(" Fahrenheit");
}

void read_gesture()
{
  x=analogRead(A0);
  y=analogRead(A1);
  z=analogRead(A2);
}

void read_temp()
{
 if ( !ds.search(addr)) {
    //Serial.println("No more addresses.");
    //Serial.println();
    ds.reset_search();
    delay(250);
    return;
  }
  
  //Serial.print("ROM =");
  for( i = 0; i < 8; i++) {
    //Serial.write(' ');
    //Serial.print(addr[i], HEX);
  }

  if (OneWire::crc8(addr, 7) != addr[7]) {
      //Serial.println("CRC is not valid!");
      return;
  }
  //Serial.println();
 
  // the first ROM byte indicates which chip
  switch (addr[0]) {
    case 0x10:
      //Serial.println("  Chip = DS18S20");  // or old DS1820
      type_s = 1;
      break;
    case 0x28:
      //Serial.println("  Chip = DS18B20");
      type_s = 0;
      break;
    case 0x22:
      //Serial.println("  Chip = DS1822");
      type_s = 0;
      break;
    default:
      //Serial.println("Device is not a DS18x20 family device.");
      return;
  } 

  ds.reset();
  ds.select(addr);
  ds.write(0x44, 1);        // start conversion, with parasite power on at the end
  
  delay(1000);     // maybe 750ms is enough, maybe not
  // we might do a ds.depower() here, but the reset will take care of it.
  
  present = ds.reset();
  ds.select(addr);    
  ds.write(0xBE);         // Read Scratchpad

  //Serial.print("  Data = ");
  //Serial.print(present, HEX);
  //Serial.print(" ");
  for ( i = 0; i < 9; i++) {           // we need 9 bytes
    data[i] = ds.read();
    //Serial.print(data[i], HEX);
    //Serial.print(" ");
  }
  //Serial.print(" CRC=");
  //Serial.print(OneWire::crc8(data, 8), HEX);
  //Serial.println();

  // Convert the data to actual temperature
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.
  int16_t raw = (data[1] << 8) | data[0];
  if (type_s) {
    raw = raw << 3; // 9 bit resolution default
    if (data[7] == 0x10) {
      // "count remain" gives full 12 bit resolution
      raw = (raw & 0xFFF0) + 12 - data[6];
    }
  } else {
    byte cfg = (data[4] & 0x60);
    // at lower res, the low bits are undefined, so let's zero them
    if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms
    else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms
    else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms
    //// default is 12 bit resolution, 750 ms conversion time
  }
  celsius = (float)raw / 16.0;
  fahrenheit = celsius * 1.8 + 32.0;
}

void updateTemp(String tempF1,String tempF2, String tempF3, String tempF4, String tempF5, String tempF6, String tempF7)
{
  String cmd = "AT+CIPSTART=\"TCP\",\"";
  cmd += "api.thingspeak.com";
  cmd += "\",80";
  sendDebug(cmd);
  delay(2000);
  if(Serial.find("Error"))
  {
    monitor.print("RECEIVED: Error");
    return;
  }
  cmd = GET;
  cmd += tempF1;
  cmd +="&field2=";
  cmd += tempF2;
  cmd +="&field3=";
  cmd += tempF3;
  cmd += "&field4=";
  cmd += tempF4;
  cmd += "&field5=";
  cmd += tempF5;
  cmd += "&field6=";
  cmd += tempF6;
  cmd += "&field7=";
  cmd += tempF7;
  cmd += "\r\n";
  Serial.print("AT+CIPSEND=");
  Serial.println(cmd.length());
  if(Serial.find(">"))
  {
    monitor.print(">");
    monitor.print(cmd);
    Serial.print(cmd);
  }
  else
  {
    sendDebug("AT+CIPCLOSE");
  }
  if(Serial.find("OK"))
  {
    monitor.println("RECEIVED: OK");
  }
  else
  {
    monitor.println("RECEIVED: Error");
  }
}

void sendDebug(String cmd)
{
  monitor.print("SEND: ");
  monitor.println(cmd);
  Serial.println(cmd);
}

boolean connectWiFi()
{
  Serial.println("AT+CWMODE=3");
  delay(2000);
  String cmd="AT+CWJAP=\"";
  cmd+=SSID;
  cmd+="\",\"";
  cmd+=PASS;
  cmd+="\"";
  sendDebug(cmd);
  delay(5000);
  if(Serial.find("OK"))
  {
    monitor.println("RECEIVED: OK");
    return true;
  }
  else
  {
    monitor.println("RECEIVED: Error");
    return false;
  }
}
4.3.2 With Wi-Fi:
#include <OneWire.h>
#include <SoftwareSerial.h>

SoftwareSerial heart(2,3); // pin 2 (heart rate sensor output)
OneWire  ds(10);  // on pin 10 (temp sensor orange wire)

#define SSID "prasuuuu"
#define PASS "prasuna12345"

#define IP "184.106.153.149" // thingspeak.com
String GET = "GET /update?key=B0YIHHP7FLWDANL9&field1=0";

SoftwareSerial monitor(10, 11); // RX, TX

int sys, dia, pulse;
int x,y,z;

byte i;
byte present = 0;
byte type_s;
byte data[12];
byte addr[8];
float celsius, fahrenheit;

void setup() 
{
  heart.begin(9600);
  Serial.begin(115200);
  monitor.begin(9600);
  sendDebug("AT");
  delay(5000);
  if(Serial.find("OK"))
  {
    monitor.println("RECEIVED: OK");
    connectWiFi();
  }
}

void loop() 
{
  while(!heart.available());
  while(heart.available())
  {
    sys=heart.parseInt();
    dia=heart.parseInt();
    pulse=heart.parseInt();
    //Serial.println(sys);
    //Serial.println(dia);
    //Serial.println(pulse);
    delay(4000);
    while(heart.available())
    {
      char ch=heart.read();
      delay(10);
    }
   }
   read_gesture();
   read_temp();
   //Serial.println(x);
   //Serial.println(y);
   //Serial.println(z);

   //Serial.print(celsius);
   updateTemp(String(sys),String(dia),String(pulse),String(celsius),String(x),String(y),String(z));
   //Serial.print(" Celsius, ");
   //Serial.print(fahrenheit);
   //Serial.println(" Fahrenheit");
}

void read_gesture()
{
  x=analogRead(A0);
  y=analogRead(A1);
  z=analogRead(A2);
}

void read_temp()
{
 if ( !ds.search(addr)) {
    //Serial.println("No more addresses.");
    //Serial.println();
    ds.reset_search();
    delay(250);
    return;
  }
  
  //Serial.print("ROM =");
  for( i = 0; i < 8; i++) {
    //Serial.write(' ');
    //Serial.print(addr[i], HEX);
  }

  if (OneWire::crc8(addr, 7) != addr[7]) {
      //Serial.println("CRC is not valid!");
      return;
  }
  //Serial.println();
 
  // the first ROM byte indicates which chip
  switch (addr[0]) {
    case 0x10:
      //Serial.println("  Chip = DS18S20");  // or old DS1820
      type_s = 1;
      break;
    case 0x28:
      //Serial.println("  Chip = DS18B20");
      type_s = 0;
      break;
    case 0x22:
      //Serial.println("  Chip = DS1822");
      type_s = 0;
      break;
    default:
      //Serial.println("Device is not a DS18x20 family device.");
      return;
  } 

  ds.reset();
  ds.select(addr);
  ds.write(0x44, 1);        // start conversion, with parasite power on at the end
  
  delay(1000);     // maybe 750ms is enough, maybe not
  // we might do a ds.depower() here, but the reset will take care of it.
  
  present = ds.reset();
  ds.select(addr);    
  ds.write(0xBE);         // Read Scratchpad
  //Serial.print("  Data = ");
  //Serial.print(present, HEX);
  //Serial.print(" ");
  for ( i = 0; i < 9; i++) {           // we need 9 bytes
    data[i] = ds.read();
    //Serial.print(data[i], HEX);
    //Serial.print(" ");
  }
  //Serial.print(" CRC=");
  //Serial.print(OneWire::crc8(data, 8), HEX);
  //Serial.println();
  // Convert the data to actual temperature
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.
  int16_t raw = (data[1] << 8) | data[0];
  if (type_s) {
    raw = raw << 3; // 9 bit resolution default
    if (data[7] == 0x10) {
      // "count remain" gives full 12 bit resolution
      raw = (raw & 0xFFF0) + 12 - data[6];
    }
  } else {
    byte cfg = (data[4] & 0x60);
    // at lower res, the low bits are undefined, so let's zero them
    if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms
    else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms
    else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms
  }
  celsius = (float)raw / 16.0;
  fahrenheit = celsius * 1.8 + 32.0;
}

void updateTemp(String tempF1,String tempF2, String tempF3, String tempF4, String tempF5, String tempF6, String tempF7)
{
  String cmd = "AT+CIPSTART=\"TCP\",\"";
  cmd += "api.thingspeak.com";
  cmd += "\",80";
  sendDebug(cmd);
  delay(2000);
  if(Serial.find("Error"))
  {
    monitor.print("RECEIVED: Error");
    return;
  }
  cmd = GET;
  cmd += tempF1;
  cmd +="&field2=";
  cmd += tempF2;
  cmd +="&field3=";
  cmd += tempF3;
  cmd += "&field4=";
  cmd += tempF4;
  cmd += "&field5=";
  cmd += tempF5;
  cmd += "&field6=";
  cmd += tempF6;
  cmd += "&field7=";
  cmd += tempF7;
  cmd += "\r\n";
  Serial.print("AT+CIPSEND=");
  Serial.println(cmd.length());
  if(Serial.find(">"))
  {
    monitor.print(">");
    monitor.print(cmd);
    Serial.print(cmd);
  }
  else
  {
    sendDebug("AT+CIPCLOSE");
  }
  if(Serial.find("OK"))
  {
    monitor.println("RECEIVED: OK");
  }
  else
  {
    monitor.println("RECEIVED: Error");
  }
}

void sendDebug(String cmd)
{
  monitor.print("SEND: ");
  monitor.println(cmd);
  Serial.println(cmd);
}

boolean connectWiFi()
{
  Serial.println("AT+CWMODE=3");
  delay(2000);
  String cmd="AT+CWJAP=\"";
  cmd+=SSID;
  cmd+="\",\"";
  cmd+=PASS;
  cmd+="\"";
  sendDebug(cmd);
  delay(5000);
  if(Serial.find("OK"))
  {
    Serial.println("RECEIVED: OK");
    return true;
  }
  else
  {
    monitor.println("RECEIVED: Error");
    return false;
  }
}
